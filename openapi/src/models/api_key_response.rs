/*
 * Sindri Labs API
 *
 *  ## About [Sindri Labs](https://www.sindri.app/)' API simplifies the developer experience to enable fast and scalable zero-knowledge proof generation. Front-End Dashboard: [https://sindri.app/login](https://sindri.app/login) ## Documentation The [Sindri Documentation](https://sindri.app/docs) contains everything you need to get started! ## Sindri Resources The [sindri-resources GitHub repo](https://github.com/Sindri-Labs/sindri-resources) contains contains resources and sample data for the Sindri API. ## Using this Page This is a standard [OpenAPI (Swagger)](https://swagger.io/specification/) API documentation page. It provides detailed documentation for each endpoint. This page enables easy prototyping via the \"Try it out\" feature! Since all Sindri endpoints require a valid API Key, in order to use the \"Try it out\" feature for any endpoint in this documentation you must first obtain an API key. Do this in one of two ways: 1. Enter your username and password in the `/api/apikey/generate` endpoint of the **Authorization** section below. Use the API key returned in the `access` field of the response. 2. Obtain an API key from the Sindri Dashboard team \"Account Settings\". After obtaining your API key, authorize your page session by entering your API Key in the `SindriAPIKeyBearerAuth` section, reached by clicking \"Authorize\" below. Proving Backend Version: v1.2.17
 *
 * The version of the OpenAPI document: v1.17.28
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApiKeyResponse : Response containing an API key.  This key is used in conjunction with the APIKey model to authenticate users in the API.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiKeyResponse {
    #[serde(rename = "api_key", deserialize_with = "Option::deserialize")]
    pub api_key: Option<String>,
    /// The date that the API key was created.
    #[serde(rename = "date_created")]
    pub date_created: String,
    #[serde(rename = "date_expires", deserialize_with = "Option::deserialize")]
    pub date_expires: Option<String>,
    #[serde(rename = "date_last_used", deserialize_with = "Option::deserialize")]
    pub date_last_used: Option<String>,
    /// The database ID for the API key. Used when deleting keys.
    #[serde(rename = "id")]
    pub id: String,
    /// The human-readable name for the API key used for managing keys.
    #[serde(rename = "name")]
    pub name: String,
    /// The non-secret key prefix.
    #[serde(rename = "prefix")]
    pub prefix: String,
    /// The non-secret key suffix. Helpful for identifying keys if a name wasn't specified at creation time.
    #[serde(rename = "suffix")]
    pub suffix: String,
}

impl ApiKeyResponse {
    /// Response containing an API key.  This key is used in conjunction with the APIKey model to authenticate users in the API.
    pub fn new(
        api_key: Option<String>,
        date_created: String,
        date_expires: Option<String>,
        date_last_used: Option<String>,
        id: String,
        name: String,
        prefix: String,
        suffix: String,
    ) -> ApiKeyResponse {
        ApiKeyResponse {
            api_key,
            date_created,
            date_expires,
            date_last_used,
            id,
            name,
            prefix,
            suffix,
        }
    }
}
