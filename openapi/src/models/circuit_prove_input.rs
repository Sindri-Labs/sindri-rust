/*
 * Sindri Labs API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.15.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CircuitProveInput : Client input to prove a circuit.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CircuitProveInput {
    /// An arbitrary mapping of metadata keys to string values. This can be used to track additional information about the proof such as an ID from an external system.
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "proof_input")]
    pub proof_input: Box<models::ProofInput>,
    /// A boolean indicating whether to perform an internal verification check during the proof creation.
    #[serde(rename = "perform_verify", skip_serializing_if = "Option::is_none")]
    pub perform_verify: Option<bool>,
    /// Internal prover implementation setting.
    #[serde(rename = "prover_implementation", skip_serializing_if = "Option::is_none")]
    pub prover_implementation: Option<String>,
}

impl CircuitProveInput {
    /// Client input to prove a circuit.
    pub fn new(proof_input: models::ProofInput) -> CircuitProveInput {
        CircuitProveInput {
            meta: None,
            proof_input: Box::new(proof_input),
            perform_verify: None,
            prover_implementation: None,
        }
    }
}

