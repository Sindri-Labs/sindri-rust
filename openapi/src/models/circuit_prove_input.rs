/*
 * Sindri Labs API
 *
 *  ## About [Sindri Labs](https://www.sindri.app/)' API simplifies the developer experience to enable fast and scalable zero-knowledge proof generation.  Front-End Dashboard: [https://sindri.app/login](https://sindri.app/login)  ## Documentation The [Sindri Documentation](https://sindri.app/docs) contains everything you need to get started!  ## Sindri Resources The [sindri-resources GitHub repo](https://github.com/Sindri-Labs/sindri-resources) contains contains resources and sample data for the Sindri API.  ## Using this Page This is a standard [OpenAPI (Swagger)](https://swagger.io/specification/) API documentation page. It provides detailed documentation for each endpoint.  This page enables easy prototyping via the \"Try it out\" feature!  Since all Sindri endpoints require a valid API Key, in order to use the \"Try it out\" feature for any endpoint in this documentation you must first obtain an API key. Do this in one of two ways: 1. Enter your username and password in the `/api/apikey/generate` endpoint of the **Authorization** section below. Use the API key returned in the `access` field of the response. 2. Obtain an API key from the Sindri Dashboard team \"Account Settings\".  After obtaining your API key, authorize your page session by entering your API Key in the `SindriAPIKeyBearerAuth` section, reached by clicking \"Authorize\" below.  Proving Backend Version: v1.0.36 
 *
 * The version of the OpenAPI document: v1.14.5
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CircuitProveInput : Client input to prove a circuit.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CircuitProveInput {
    /// An arbitrary mapping of metadata keys to string values. This can be used to track additional information about the proof such as an ID from an external system.
    #[serde(rename = "meta", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub meta: Option<Option<::std::collections::HashMap<String, serde_json::Value>>>,
    /// An object mapping proof input variable names to their values. Can be a raw JSON object or a string serialized as JSON or TOML.
    #[serde(rename = "proof_input", deserialize_with = "Option::deserialize")]
    pub proof_input: Option<serde_json::Value>,
    /// A boolean indicating whether to perform an internal verification check during the proof creation.
    #[serde(rename = "perform_verify", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub perform_verify: Option<Option<serde_json::Value>>,
    /// Internal prover implementation setting.
    #[serde(rename = "prover_implementation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prover_implementation: Option<Option<serde_json::Value>>,
}

impl CircuitProveInput {
    /// Client input to prove a circuit.
    pub fn new(proof_input: Option<serde_json::Value>) -> CircuitProveInput {
        CircuitProveInput {
            meta: None,
            proof_input,
            perform_verify: None,
            prover_implementation: None,
        }
    }
}


