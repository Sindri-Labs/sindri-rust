/*
 * Sindri Labs API
 *
 *  ## About [Sindri Labs](https://www.sindri.app/)' API simplifies the developer experience to enable fast and scalable zero-knowledge proof generation.  Front-End Dashboard: [https://sindri.app/login](https://sindri.app/login)  ## Documentation The [Sindri Documentation](https://sindri.app/docs) contains everything you need to get started!  ## Sindri Resources The [sindri-resources GitHub repo](https://github.com/Sindri-Labs/sindri-resources) contains contains resources and sample data for the Sindri API.  ## Using this Page This is a standard [OpenAPI (Swagger)](https://swagger.io/specification/) API documentation page. It provides detailed documentation for each endpoint.  This page enables easy prototyping via the \"Try it out\" feature!  Since all Sindri endpoints require a valid API Key, in order to use the \"Try it out\" feature for any endpoint in this documentation you must first obtain an API key. Do this in one of two ways: 1. Enter your username and password in the `/api/apikey/generate` endpoint of the **Authorization** section below. Use the API key returned in the `access` field of the response. 2. Obtain an API key from the Sindri Dashboard team \"Account Settings\".  After obtaining your API key, authorize your page session by entering your API Key in the `SindriAPIKeyBearerAuth` section, reached by clicking \"Authorize\" below.  Proving Backend Version: v1.0.36 
 *
 * The version of the OpenAPI document: v1.14.5
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NoirCircuitInfoResponse : Response for getting Noir circuit info.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NoirCircuitInfoResponse {
    /// A unique identifier generated for the circuit. UUID4 format.
    #[serde(rename = "circuit_id", deserialize_with = "Option::deserialize")]
    pub circuit_id: Option<serde_json::Value>,
    #[serde(rename = "circuit_name", deserialize_with = "Option::deserialize")]
    pub circuit_name: Option<serde_json::Value>,
    /// The name of the project. This can be used in place of circuit_id for proving. This is specified during creation in the included sindri.json file. If the project is renamed, this will be the new name of the project, not the original name that was included in the sindri.json file.
    #[serde(rename = "project_name", deserialize_with = "Option::deserialize")]
    pub project_name: Option<serde_json::Value>,
    /// The development framework used to write the circuit. This is specified during creation in the included sindri.json file.
    #[serde(rename = "circuit_type", deserialize_with = "Option::deserialize")]
    pub circuit_type: Option<CircuitType>,
    /// The UTC datetime the circuit was uploaded in ISO8601 format.
    #[serde(rename = "date_created", deserialize_with = "Option::deserialize")]
    pub date_created: Option<serde_json::Value>,
    /// Metadata keys and values for the circuit that were specified at creation time.
    #[serde(rename = "meta", deserialize_with = "Option::deserialize")]
    pub meta: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// The number of proofs submitted for this circuit.
    #[serde(rename = "num_proofs", deserialize_with = "Option::deserialize")]
    pub num_proofs: Option<serde_json::Value>,
    /// The proving scheme for this circuit. This is specified during creation in the included sindri.json file.
    #[serde(rename = "proving_scheme", deserialize_with = "Option::deserialize")]
    pub proving_scheme: Option<serde_json::Value>,
    /// Whether the circuit is public. Public circuits can be used by any user.
    #[serde(rename = "public", deserialize_with = "Option::deserialize")]
    pub public: Option<serde_json::Value>,
    #[serde(rename = "status")]
    pub status: crate::models::JobStatus,
    /// The job is finished processing and waiting/polling can be terminated.
    #[serde(rename = "finished_processing", deserialize_with = "Option::deserialize")]
    pub finished_processing: Option<serde_json::Value>,
    /// Tags for the circuit.
    #[serde(rename = "tags", deserialize_with = "Option::deserialize")]
    pub tags: Option<serde_json::Value>,
    /// The name of the team that owns this circuit.
    #[serde(rename = "team", deserialize_with = "Option::deserialize")]
    pub team: Option<serde_json::Value>,
    /// URL for the avatar image of the team that owns this circuit.
    #[serde(rename = "team_avatar_url", deserialize_with = "Option::deserialize")]
    pub team_avatar_url: Option<serde_json::Value>,
    /// The slug of the team that owns this circuit.
    #[serde(rename = "team_slug", deserialize_with = "Option::deserialize")]
    pub team_slug: Option<serde_json::Value>,
    /// Total compute time in ISO8601 format.
    #[serde(rename = "compute_time", deserialize_with = "Option::deserialize")]
    pub compute_time: Option<serde_json::Value>,
    /// Total compute time in seconds.
    #[serde(rename = "compute_time_sec", deserialize_with = "Option::deserialize")]
    pub compute_time_sec: Option<serde_json::Value>,
    /// Detailed compute times for the circuit compilation.
    #[serde(rename = "compute_times", deserialize_with = "Option::deserialize")]
    pub compute_times: Option<serde_json::Value>,
    /// Total size of stored file(s) in bytes.
    #[serde(rename = "file_size", deserialize_with = "Option::deserialize")]
    pub file_size: Option<serde_json::Value>,
    /// Queue time in ISO8601 format.
    #[serde(rename = "queue_time", deserialize_with = "Option::deserialize")]
    pub queue_time: Option<serde_json::Value>,
    /// Queue time in seconds.
    #[serde(rename = "queue_time_sec", deserialize_with = "Option::deserialize")]
    pub queue_time_sec: Option<serde_json::Value>,
    /// The name of the uploaded circuit file. Note: the CLI and SDKs create a generic name when a directory is specified for upload.
    #[serde(rename = "uploaded_file_name", deserialize_with = "Option::deserialize")]
    pub uploaded_file_name: Option<serde_json::Value>,
    /// Boolean indicating whether this circuit has a smart contract verifier available.
    #[serde(rename = "has_smart_contract_verifier", deserialize_with = "Option::deserialize")]
    pub has_smart_contract_verifier: Option<serde_json::Value>,
    /// Boolean indicating whether this circuit has a verification key available.
    #[serde(rename = "has_verification_key", deserialize_with = "Option::deserialize")]
    pub has_verification_key: Option<serde_json::Value>,
    /// The verification key of this circuit.
    #[serde(rename = "verification_key", deserialize_with = "Option::deserialize")]
    pub verification_key: Option<serde_json::Value>,
    /// A list of runtime warnings with UTC timestamps.
    #[serde(rename = "warnings", deserialize_with = "Option::deserialize")]
    pub warnings: Option<serde_json::Value>,
    /// The error message for a failed circuit upload.
    #[serde(rename = "error", deserialize_with = "Option::deserialize")]
    pub error: Option<serde_json::Value>,
    /// The number of opcodes in the intermediate representation.
    #[serde(rename = "acir_opcodes", deserialize_with = "Option::deserialize")]
    pub acir_opcodes: Option<serde_json::Value>,
    /// The number of constraints with an instantiated proving backend in the circuit.
    #[serde(rename = "circuit_size", deserialize_with = "Option::deserialize")]
    pub circuit_size: Option<serde_json::Value>,
    /// The elliptic curve over which the proving protocol takes place.
    #[serde(rename = "curve", deserialize_with = "Option::deserialize")]
    pub curve: Option<serde_json::Value>,
    /// The name of the circuit project specified in the included Nargo.toml file.
    #[serde(rename = "nargo_package_name", deserialize_with = "Option::deserialize")]
    pub nargo_package_name: Option<serde_json::Value>,
    /// The Noir frontend version tag.
    #[serde(rename = "noir_version", deserialize_with = "Option::deserialize")]
    pub noir_version: Option<serde_json::Value>,
}

impl NoirCircuitInfoResponse {
    /// Response for getting Noir circuit info.
    pub fn new(circuit_id: Option<serde_json::Value>, circuit_name: Option<serde_json::Value>, project_name: Option<serde_json::Value>, circuit_type: Option<CircuitType>, date_created: Option<serde_json::Value>, meta: Option<::std::collections::HashMap<String, serde_json::Value>>, num_proofs: Option<serde_json::Value>, proving_scheme: Option<serde_json::Value>, public: Option<serde_json::Value>, status: crate::models::JobStatus, finished_processing: Option<serde_json::Value>, tags: Option<serde_json::Value>, team: Option<serde_json::Value>, team_avatar_url: Option<serde_json::Value>, team_slug: Option<serde_json::Value>, compute_time: Option<serde_json::Value>, compute_time_sec: Option<serde_json::Value>, compute_times: Option<serde_json::Value>, file_size: Option<serde_json::Value>, queue_time: Option<serde_json::Value>, queue_time_sec: Option<serde_json::Value>, uploaded_file_name: Option<serde_json::Value>, has_smart_contract_verifier: Option<serde_json::Value>, has_verification_key: Option<serde_json::Value>, verification_key: Option<serde_json::Value>, warnings: Option<serde_json::Value>, error: Option<serde_json::Value>, acir_opcodes: Option<serde_json::Value>, circuit_size: Option<serde_json::Value>, curve: Option<serde_json::Value>, nargo_package_name: Option<serde_json::Value>, noir_version: Option<serde_json::Value>) -> NoirCircuitInfoResponse {
        NoirCircuitInfoResponse {
            circuit_id,
            circuit_name,
            project_name,
            circuit_type,
            date_created,
            meta,
            num_proofs,
            proving_scheme,
            public,
            status,
            finished_processing,
            tags,
            team,
            team_avatar_url,
            team_slug,
            compute_time,
            compute_time_sec,
            compute_times,
            file_size,
            queue_time,
            queue_time_sec,
            uploaded_file_name,
            has_smart_contract_verifier,
            has_verification_key,
            verification_key,
            warnings,
            error,
            acir_opcodes,
            circuit_size,
            curve,
            nargo_package_name,
            noir_version,
        }
    }
}

/// The development framework used to write the circuit. This is specified during creation in the included sindri.json file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CircuitType {
    #[serde(rename = "noir")]
    Noir,
}

impl Default for CircuitType {
    fn default() -> CircuitType {
        Self::Noir
    }
}

